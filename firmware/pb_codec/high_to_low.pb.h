/* Automatically generated nanopb header */
/* Generated by nanopb-0.4.4 */

#ifndef PB_HIGH_TO_LOW_PB_H_INCLUDED
#define PB_HIGH_TO_LOW_PB_H_INCLUDED
#include <nanopb/pb.h>

#if PB_PROTO_HEADER_VERSION != 40
#error Regenerate this file with the current version of nanopb generator.
#endif

/* Enum definitions */
typedef enum _PWMState {
    PWMState_ON = 0,
    PWMState_OFF = 1,
    PWMState_F = 2
} PWMState;

/* Struct definitions */
typedef struct _CpuHeartbeat {
    char dummy_field;
} CpuHeartbeat;

typedef struct _Empty {
    char dummy_field;
} Empty;

typedef struct _SetPWM {
    PWMState state;
    float duty_cycle;
} SetPWM;

typedef struct _HighToLow {
    pb_size_t which_message;
    union {
        SetPWM set_pwm;
        bool allow_power_on;
        Empty enable;
        Empty disable;
        CpuHeartbeat heartbeat;
    } message;
} HighToLow;


/* Helper constants for enums */
#define _PWMState_MIN PWMState_ON
#define _PWMState_MAX PWMState_F
#define _PWMState_ARRAYSIZE ((PWMState)(PWMState_F+1))


#ifdef __cplusplus
extern "C" {
#endif

/* Initializer values for message structs */
#define Empty_init_default                       {0}
#define SetPWM_init_default                      {_PWMState_MIN, 0}
#define CpuHeartbeat_init_default                {0}
#define HighToLow_init_default                   {0, {SetPWM_init_default}}
#define Empty_init_zero                          {0}
#define SetPWM_init_zero                         {_PWMState_MIN, 0}
#define CpuHeartbeat_init_zero                   {0}
#define HighToLow_init_zero                      {0, {SetPWM_init_zero}}

/* Field tags (for use in manual encoding/decoding) */
#define SetPWM_state_tag                         1
#define SetPWM_duty_cycle_tag                    2
#define HighToLow_set_pwm_tag                    1
#define HighToLow_allow_power_on_tag             2
#define HighToLow_enable_tag                     3
#define HighToLow_disable_tag                    4
#define HighToLow_heartbeat_tag                  5

/* Struct field encoding specification for nanopb */
#define Empty_FIELDLIST(X, a) \

#define Empty_CALLBACK NULL
#define Empty_DEFAULT NULL

#define SetPWM_FIELDLIST(X, a) \
X(a, STATIC,   SINGULAR, UENUM,    state,             1) \
X(a, STATIC,   SINGULAR, FLOAT,    duty_cycle,        2)
#define SetPWM_CALLBACK NULL
#define SetPWM_DEFAULT NULL

#define CpuHeartbeat_FIELDLIST(X, a) \

#define CpuHeartbeat_CALLBACK NULL
#define CpuHeartbeat_DEFAULT NULL

#define HighToLow_FIELDLIST(X, a) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,set_pwm,message.set_pwm),   1) \
X(a, STATIC,   ONEOF,    BOOL,     (message,allow_power_on,message.allow_power_on),   2) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,enable,message.enable),   3) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,disable,message.disable),   4) \
X(a, STATIC,   ONEOF,    MESSAGE,  (message,heartbeat,message.heartbeat),   5)
#define HighToLow_CALLBACK NULL
#define HighToLow_DEFAULT NULL
#define HighToLow_message_set_pwm_MSGTYPE SetPWM
#define HighToLow_message_enable_MSGTYPE Empty
#define HighToLow_message_disable_MSGTYPE Empty
#define HighToLow_message_heartbeat_MSGTYPE CpuHeartbeat

extern const pb_msgdesc_t Empty_msg;
extern const pb_msgdesc_t SetPWM_msg;
extern const pb_msgdesc_t CpuHeartbeat_msg;
extern const pb_msgdesc_t HighToLow_msg;

/* Defines for backwards compatibility with code written before nanopb-0.4.0 */
#define Empty_fields &Empty_msg
#define SetPWM_fields &SetPWM_msg
#define CpuHeartbeat_fields &CpuHeartbeat_msg
#define HighToLow_fields &HighToLow_msg

/* Maximum encoded size of messages (where known) */
#define Empty_size                               0
#define SetPWM_size                              7
#define CpuHeartbeat_size                        0
#define HighToLow_size                           9

#ifdef __cplusplus
} /* extern "C" */
#endif

#endif
